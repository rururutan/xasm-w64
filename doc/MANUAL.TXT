　クロスアセンブラ　ＸＡＳＭ　Ver 1.75　マニュアル


§１　概要

　ＭＳ−ＤＯＳ上で動作する，８ビットＣＰＵのための絶対番地クロスアセンブ
ラです．

　ラベル数の制約（１５００個まで）等のため，大きなプログラムの開発には適
していませんが，ニモニック−機械語テーブルファイルを参照する形式を取って
いるため，様々なＣＰＵに対応することができます．

　出力ファイルはリストファイル，インテルＨＥＸファイル．このほか，オプシ
ョン指定でバイナリファイルや，デバッグを支援するためのシンボルファイル，
クロスリファレンスファイルを出力することができます．


§２　ファイル構成

|   XASM.EXE          アセンブラ本体
|   XASM.DOC          このファイル
|   
+---8085
|       XASM.TBL      ８０８５Ａ用テーブルファイル
|       TEST.I85      テーブルファイルテストソース
|       
+---8048
|       XASM.TBL      ８０４８用テーブルファイル
|       TEST.I48      テーブルファイルテストソース
|       
+---Z80
        XASM.TBL      Ｚ８０用テーブルファイル
        TEST.Z80      テーブルファイルテストソース


§３　使用法

(1)コマンドライン形式
        XASM [/s /bxxxx /c  /t /fNAME] srcfile

　/s     ： シンボルファイル(.SYM）を作成します．

　/bxxxx ： ＨＥＸファイルの代わりに xxxx （16進数）を先頭番地としたバイ
            ナリファイル（.BIN）を作成します．

　/c     ：クロスリファレンスファイル（.CRF）を作成します．

　/t     ：テンポラリファイル（.$$$）をディスクに作成します．このオプシ
           ョンを付けない場合，テンポラリ情報をメモリに展開します．通常
           の使用ではメモリ展開の方が高速ですので有利です．
　/fNAME ：使用するテーブルファイルを NAME とします．デフォルトではカレ
           ントディレクトリの XASM.TBL です．

　・オプションは必ずスペースで区切ってください．
　・オプションは大文字小文字の区別をしません．

  例　　　c:\WORK>XASM /f8048.tbl test.i48
               テーブルファイルとして 8048.tbl を使い， test.i48 をアセン
               ブルして，リストファイルとＨＥＸファイルを作成します．

          c:\8085>XASM rmt.i85
               rmt.i85をアセンブルしてリストファイルとＨＥＸファイルを作成
               します．

  　　　　c:\8085>XASM /s /t rmt.i85
               rmt.i85をアセンブルしてシンボルファイルとテンポラリファイル，
               リストファイル，ＨＥＸファイルを作成します．

  　　　　c:\8085>XASM /c  rmt.i85
               rmt.i85をアセンブルしてクロスリファレンスファイルと，リスト
               ファイル，ＨＥＸファイルを作成します．

  　　　　c:\8085>XASM /b0  rmt.i85
               rmt.i85をアセンブルしてリストファイルと，０番地を先頭とした
               バイナリファイルを作成します．

          c:\8085>XASM /s/t rmt.i85
                これはだめ．オプションがつながっています．


(2)ファイル名
　ＸＡＳＭはソースファイルと同じディレクトリに出力ファイルを作成します．
そのためソースファイルの拡張子を「.LST」「.SYM」「.HEX」「.CRF」「.BIN」
「.$$$」等にすると出力ファイルによって上書きされてしまいます．


(3)エラー，警告の行数表示
　・元のソースファイルでエラー，警告が生じたとき
　　　　その行そのまま
　　　　（例）15         105

　・インクルードしたファイルでのエラー，警告
　　　　[元のソースでの行数]-[インクルードファイルでの行数]
        （例）14-25      20-3
        　　　　↑元のソースの14行目でインクルードしたファイルの25行目
     +--------------------------------------------------------------+
　　 |  この行数表示は暫定仕様です．                                |
     |　インクルードファイルの中でさらにファイルのインクルードを行  |
     |  っているとインクルードファイルの行数を正しく表示しません．  |
     +--------------------------------------------------------------+


§４　行の書式

　label:   mnemonic   operand,operand ;comment

　　* １行の長さは１２７バイト以内にしてください．
　　* ラベルは直後にコロンを付けます．
　　* ラベルはアルファベットで始まる文字列で英数字のほかアンダースコアが
　　　使えます．大文字小文字の区別はしません．
　　* ラベルは１６文字まで区別し，最大１５００個使えます．
　　* オペランドはコンマで区切ります．
　　* オペランドの中のスペースは意味を持ちません．
  　　　　(1)   (IX + 23) → (IX+23)
　  　　　(2)   (I X+2 3) → (IX+23)
　　　上記(2)でもエラーになりません．
　　* セミコロンの後ろはコメントとして無視します．


§５　演算子
　数値記述に以下の演算子が使えます．

        ( ) 　　　　 括弧　　（計算の順序を変えます）
        -　　　　　　単項
        *　 /　　　　
        +   -　　　　
        <<  >>　　　 左シフト　右シフト
     <  >  <=  >=　　比較　　（テーブルファイルで使用します）
     　 =   <>       比較　　（テーブルファイルで使用します）
        &   |　　　　ビット演算
        &&  　       論理演算（テーブルファイルで使用します）
        ||　　       論理演算（テーブルファイルで使用します）

　上から下へと優先順位が低くなります．



§６　定数表現

(1)数値
　１０進数のほか，下の方法で２進数と１６進数で表現できます．

　　　* ２進数　末尾に「B」または「b」を付ける．
　　　　　例　00110101b    10B

　　　* １６進数　末尾に「H」または「h」を付ける．ただし先頭が「A」〜「F」
        のときはその前に0を付けて下さい．
　　　　　例　2a4fH    5dh   0e8h


(2)文字定数
　１バイト文字に限り文字定数として扱えます．
　　　「"」で囲まれた文字を文字定数とみなします．
　　　　　例　"A"　　"1"
              LD   A,"Q"

(3)文字列
　文字定数のほか，ＤＢ　ＤＥＦＢ　擬似命令での値に限り文字列定数が使用で
きます．

　　　「"」で囲まれた文字列を文字列定数とみなします．
　　　　　例　 "ABC DEF"

　　　* 文字定数も文字列定数も「"」を扱うことができません．


§７　擬似命令

(1)ＣＳＥＧ　　コードエリア宣言

　　　　　書式           CSEG

　　　* CSEG 以降をコードエリアとみなし，ＨＥＸファイルに出力します．
　　　　デフォルトでは，すべてコードエリアになっています．

(2)ＤＳＥＧ　　データエリア宣言

　　　　　書式           DSEG

　　　* DSEG 以降をデータエリアとみなし，ＨＥＸファイルに出力しません．


(3)ＯＲＧ　　　アドレス設定

　　　　　書式           ORG   value

　　　　　例             ORG   100H

　　　* ORG 擬似命令にはラベルを付けることができません．
　　　* XASM は CSEG と DSEG に別々にアドレスカウンタを持っていて初期値
        はどちらも 0 です． CSEG，DSEG は何回でも使えますが，その場合２
        回目以降の CSEG，DSEG では毎回，ORGでアドレスを設定しなくても，
        コード，データそれぞれ別に連続したアドレスとなります．


　　　　例

                                            CSEG
                                            ORG     0
    0000: C3 00 01                          JP      START
                                            ORG     100H
                                    START:
    0100: CD F5 01                          CALL    SETUP
    0103: 3E 80                             LD      A,80H
    0105: A0                                AND     B
                                   ・
                                   ・
                                   ・
    01F0: D3 10                             OUT     (10H),A
    01F2: C3 00 01                          JP      START  -------+
                                                                  |Ｃ
                                                                  |Ｓ
                                            DSEG                  |Ｅ
  最初のＤＳＥＧのＯＲＧは必要　→          ORG     8000H         |Ｇ
    8000: FF                        STR1:   DS      16            |の
+-- 8010: FF                        STR2:   DS      16            |続
|                                                                 |き
|                                                                 |
|                                                                 |
|Ｄ                                         CSEG                  |
|Ｓ                                 SETUP:                        |
|Ｅ 01F5: 3E 80                             LD      A,80H   ------+
|Ｇ 01F7: D3 10                             OUT     (10H),A
|の                                ・
|続                                ・
|き                                ・
|   020D: D3 11                             OUT     (11H),A
|   020F: C9                                RET
|
|
|                                           DSEG
+-- 8020: FF                        BUFF1:  DS      16

                                            END


(4)ＥＱＵ　　　シンボルの値の定義

          書式　label:   EQU    value
                     ^--ＥＱＵに限り，このコロンは無くてもよい．

          例　　PORT_A   EQU    20H

　　　* 右辺はＰＡＳＳ１でその行までに値が確定さえしていればラベル
　　　（シンボル）を使ってもかまいません．

　　　　　例    BASE     EQU    10h
                PORT_A   EQU    BASE + 10H
                PORT_B   EQU    PORT_A + 10H

(5)ＤＢ　ＤＥＦＢ　　　バイトデータ定義

　　　　　書式           DB     value,value,value,value･･･

　　　　　例　　　　　　 DB     12H,5FH,33H
                         DB     "ABC DEF"
      * 文字列の中に「"」を含めることはできません．
      　例えば「ABC"DEF」という文字列は次のように記述します．
      　                 DB     "ABC",22H,"DEF"
                    または
      　                 DB     "ABC"
      　                 DB     22H
      　                 DB     "DEF"
      * 右辺に最低１個のデータが必要です．値は２パス目で確定します．
      * リストファイルには各行10バイトぶん迄までしか出力しませんが，ＨＥ
        Ｘファイル，バイナリファイルには全て出力します．
      * １行あたりで定義可能なサイズはテンポラリ情報のラインバッファのサ
        イズの制限を受けます．文字列定数だけなら37文字までとなります．


(6)ＤＷ　ＤＥＦＷ　　　ワードデータ定義

　　　　　書式           DW     value,value,value,value･･･

　　　　　例　　　　　　 DW     0D012H,345FH



      * 右辺に最低１個のデータが必要です．値は２パス目で確定します．
      * リストファイルには各行10バイトぶん迄までしか出力しませんが，ＨＥ
        Ｘファイル，バイナリファイルには全て出力します．
      * １行あたりで定義可能なサイズはテンポラリ情報のラインバッファのサ
        イズの制限を受けます．


(7)ＤＳ　ＤＥＦＳ　　　データエリアの確保

　　　　　書式　　　　　 DS     value

　　　　　例　　　　　　 DS     20

　　　* 上の例で２０バイトのメモリを確保します．


(8)ＥＮＤ　　　ソース終了

　　　　　書式　　　　　 END

　　　* END 擬似命令以降のソースファイルを無視します．ラベルは付けられま
        せん．


(9)ＩＮＣＬＵＤＥ  ファイルのインクルード

　　　　　書式　　　　　 INCLUDE   "filename"

          例　　　　　　 INCLUDE   "io.inc"

      * INCLUDE擬似命令の行に指定ファイルを読み込みます．
      * インクルードしたファイルはリストファイルには出力しません．
      * INCLUDE擬似命令の行にラベルは付けられません．
      * エラー，警告等での行数表示で制限があります．§３ (3) をご覧くだ
      　さい．


§８　テンポラリファイル（.$$$）

　/t オプションを使用したときに出力します．
　テンポラリファイルにはＰＡＳＳ２に必要な情報のほかに，シンボル情報も含
まれます．

　ＰＡＳＳ２のための情報は次のようなフォーマットになっています．

　　行番号 {:|;} 先頭アドレス バイト数 コード生成式

　行番号の次が「;」であればリストアウトの対象となりません．

　/t オプションを付けない場合，テンポラリ情報をメモリに展開します．
      * メモリに展開する場合とディスクに展開する場合とでは，テンポラリ情
        報の内容は若干異なります．メモリに展開する場合は領域を節約するた
        め，行番号とシンボル情報が含まれません．

　        情報のためのメモリの大きさは６４ｋバイトです．大きなファイルを
        アセンブルしていて，
　　       「Temporary buffer overflow. Use '/t' option.」
        のメッセージがでたら， /t オプションを使用して再アセンブルしてく
        ださい．
      * テンポラリファイル内のシンボル情報は後述するテーブルファイル作成
        時のデバッグを支援するためのもので，ＰＡＳＳ２では参照しません．
        ＰＡＳＳ２で参照するシンボル情報はオンメモリの別テーブルに持って
        います．

§９　シンボルファイル(*.SYM)

　/s オプションを使用したときに出力します．
　ラベルのアドレスと名前を次のようなフォーマットで出力します

　ｱﾄﾞﾚｽ　ﾗﾍﾞﾙ名　ｱﾄﾞﾚｽ　ﾗﾍﾞﾙ名　ｱﾄﾞﾚｽ　ﾗﾍﾞﾙ名　
　ｱﾄﾞﾚｽ　ﾗﾍﾞﾙ名　ｱﾄﾞﾚｽ　ﾗﾍﾞﾙ名　ｱﾄﾞﾚｽ　ﾗﾍﾞﾙ名　
　　　　　　　　　　　・
　　　　　　　　　　　・
　　　　　　　　　　　・

　アドレスは常に４桁．ラベル名は１６文字までです．
　テンポラリファイルにもシンボル（ラベル）情報は付加されますが，シンボル
ファイルでは，アドレスを持つラベルに限り出力します．（ＥＱＵ擬似命令で設
定したものは出力されない．）

　このシンボルファイルはプログラムエリアのラベルとデータエリアのラベルを
区別していません．Ｚ８０や８０８５Ａなどのように，プログラムとデータが同
一アドレス空間に存在するＣＰＵでなければ，プログラムのラベルと，データの
ラベルを混同してしまいます．



§１０　クロスリファレンスファイル

　/c オプションを使用したときに出力します．
  クロスリファレンスファイルは，シンボルがどの行で使用されているのかを一
覧にし，デバッグを支援するためのものです．
　
　　出力書式例

* PIO2CM                8        25        62
* PIO2PA                9        70
* PIO2PB               10       216
* PIO2PC               11        69        73
  RPTR                222        31        36       74        77        79
* SADR                 13        20
  SPTR                223        32        37       93        96       103
  START                21        18

　先頭に「*」がついているのは，擬似命令「EQU」で定義されたものです．　シ
ンボルのあとに続くのが行番号で，最初の数字の行で値が定義されています．以
降の行番号は参照された順に表示されます．
　
　クロスリファレンスファイルを作成するための処理はすべてオンメモリで行っ
ていて，中間ファイル作成を選択できません．上限は，シンボル総数（使用可能
なラベル数と異なり，シンボルの延べ使用数）８０００が上限となっています．

　これを越えた場合，「Cref buffer overflow.」のメッセージを出し，クロス
リファレンスファイルにはそこまでの結果を出力します．


§１１　テーブルファイルの構造

　ＸＡＳＭはテーブルファイルの変更により，（６４１８０等の）独自の命令を
追加したり，まったく別のＣＰＵに対応できることが特徴となっています．（た
だし，ＸＡＳＭとテーブルファイルの表記法の制限によりＣＰＵメーカーの提示
する表記が実現できないことがあります．）ここではテーブルファイルの構造と
記述の注意事項を述べます．ただ説明が不十分なところもありますので，なにか
のプログラムをアセンブルしてソースとテーブルファイル，テンポラリファイル
を見比べて参考にしてください．

　テーブルファイルを作成する場合，注意が必要なのはテーブルファイルの読み
込み時のエラーチェックを殆どしていないことです．そのため，フォーマットの
異常があったりサイズが大きかったりするとハングアップする場合があります．
　また，テーブルファイルを全て入力してから初めてアセンブルしますと，エラ
ーが発生したときにテーブルファイルの異常なのか，（対象とする８ビットＣＰ
Ｕのアセンブリ言語の）ソースの異常なのかが判断しにくいことがあります．テ
ーブルファイルは試しながら少しずつ作成するのが安全でしょう．

　テーブルファイルには通常２つのブロックがあります．最初にキーワードの置
換表があり，次にニモニック−機械語変換表が来ます．この二つでの共通のルー
ルとして下のようなものがあります．

　* 大文字には特別な意味を持たせているものがありますので，それ以外は小文
    字で記述してください．
  * 先頭が「;」の行を無視します．（先頭の「;」だけが有効です）
  * 先頭が「@P」の行は，テーブルファイル読み込み時に「@P」以降を標準出力
    に出力します．

(1)キーワードの置換表
　キーワードの置換表は，下記のニモニック−機械語変換表のなかでオペランド
の記述を省力化するために使うもので「@\n」（ｎは数字で０〜１５）で始まり
ます．
　１置換１行で，[検索語]，[置換語]のように２つの語をコンマで区切ります．

@\0
[検索語]，[置換語]
[検索語]，[置換語]
[検索語]，[置換語]
@\1
[検索語]，[置換語]
[検索語]，[置換語]
[検索語]，[置換語]
@\2
[検索語]，[置換語]
[検索語]，[置換語]
[検索語]，[置換語]
[検索語]，[置換語]

　のように記述します．（ []は不要です）「\」のあとの値は必ず 0 から始ま
り，順に 1 ずつ増えるようにします．逆順になっていたり飛ばしたりすると，
動作しないことがあります．


 ＊キーワードの置換表のサイズ
　　　・登録数は合計５１２個まで．
　　　・検索語と置換語の各文字列数＋１の合計が１０ｋバイトまで．
　　すべての条件を満たしていなければなりません．


(2)ニモニック−機械語変換表
　ニモニック−機械語変換表はＰＡＳＳ１において，ソースファイルのニモニッ
クとオペランドに一致するものを探しだし，テンポラリファイルに出力する機械
語生成のための情報を得るためのもので，「@TABLE」で始まります．


　１定義１行で，各行は５つのフィールドからできています．
　(a) ニモニック
　(b) オペランドの数
　(c) オペランド
　(d) 機械語のバイト数
　(e) 機械語
　以上の各フィールドはタブまたは半角スペースで区切ります．

　(a) ニモニック
　　・ニモニックはアルファベット順に並べます．逆順になっていると，
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
　　　ＸＡＳＭはそのニモニックのコードをアセンブルできません．
　　・アルファベット小文字で表記してください．
                    ~~~~~~~
　(b) オペランドの数
　　・０〜３の数が入ります．
　
　(c) オペランド
　　・(b)で書いた数だけ必要です．
　　・小文字で表記します．
　　・置換テーブルから一致する語を探すことができる「\」と，どんな文字列
      とも一致する「~」が使えます．オペランドの中で「\1」と書けば，置換
      テーブルの「@\1」で定義した検索語から一致する語を探します．

　(d) 実行コードのバイト数

　(e) 実行コード
　　・(d)で書いた数以下．(d)で書いた数に満たない分は 0FFH となります．
　　・値を直接表記する方法と，式を表記する方法があります．
　　　　　値を直接表記する方法
　　　　　　　　　（例）　e3 5a 24
　　　　　　　　* １６進数で表記します．この方法では，１６進文字列の末尾
                  に「h」を付けてはいけません．先頭がアルファベットのと
                  きの「0」も省略します．

　　　　　式を表記する方法
　　　　　　　　* 先頭が「S」「W」「T」で始まります．それぞれその後に続
                  く式がバイトデータ，ワードデータ，テストデータであるこ
                  とを表します．
　　　　　　　　* ワードデータ式は，デフォルトでは下位上位の順で出力しま
                  す（W1234h → 3412）．上位下位の順にしたいときは，テー
                  ブルファイルの最初の行に「@W」と書きます．
　　　　　　　　* テストデータ式は，リストファイルやＨＥＸファイルに反映
                  しません．ＰＡＳＳ２でこの式を評価したとき，0にならなけ
                  れば画面に警告を表示します．
　　　　　　　　* 式の中では，次のような記号が使えます．
　　　　　　　　　「$」      その行の先頭のアドレスを表します．
　　　　　　　　　「~n」     nは１〜３の数字です．第nオペランドで「\」
　　　　　　　　　　　　  　 や「~」で置き換えた文字列を表します．


　（例）
@\0
b,0
c,1
d,2
e,3
h,4
l,5
a,7
@TABLE
adc　　 2　 　  a 　　　(hl)    1       8e
and     1       \0              1       S0a0h+~1
and     1       ~               2       e6 S~1
cpi　　 0　　　　　　   　      2       ed a1
dec     1       (ix~            3       dd 35 S~1
in      2       \0      (c)     2       ed S40h+(~1<<3)
jp      1       ~               3       c3 W~1
jr      1       ~               2       18 S(~1)-$-2 T((~1)-$+126)&0ff00
h
~~~     ~~     ~~~     ~~~~    ~~~     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(a)     (b)     (c)  　 (c)'　  (d)　    (e)

　      (a) 　ニモニック
　      (b) 　オペランドの数
　      (c) 　第１オペランド
　      (c)'　第２オペランド
　      (d) 　実行コードのバイト数
　      (e) 　実行コード　

　上のテーブルファイル例はＺ８０からの抜粋です．
　このテーブルファイルで下のような変換をおこなって，テンポラリファイ
ルに出力します．

ADC     A,(HL)  →    8e
AND     D       →    S0a0h+2
AND     0A3H    →    e6 S0a3h
CPI             →    ed a1
DEC     (IX+45) →    dd 35 S+45
IN      A,(C)   →    ed S40h+(7<<3)
JP      START   →    c3 Wstart
JR      LOOP1   →    18 S(LOOP1)-$-2 T((START)-$+126)&0ff00h

  「~」を使う場合，順序に注意してください．同じニモニックであれば，上か
ら順に検索します．従って，上のテーブルファイル例で「and \0」と「and ~」
が逆順になっていると，ソースの「AND D」 は，「and \0」と照合する前に「an
d ~」と一致して「e6 Sd」となり「d」をレジスタの「D」とみなさず，ＰＡＳＳ
２で「d」というラベル（シンボル）を探してしまうことになります．


  dec命令では第１オペランドの定義が「(ix~」となっています． オペランドの
定義ではこのように後半部が「~」というのも可能です． この場合前半部が「(i
x」であるものが一致するオペランドとみなされます．
  オペランドの後半に「~」を使用すると，オペランドの最初の文字が「(」かど
うかで動作が変わります．最初の文字が「(」である場合は，「~」相当部であっ
ても最後の「)」 はテンポラリファイルにコピーしません．最初の文字が「(」
でない場合には，「~」相当部を全てコピーします．


 ＊ニモニック−機械語変換表のサイズ
　　　・５１２行まで
　　　・ニモニックは２５６種類まで
　　　・ニモニック−機械語変換表中　(a)(c)(e)の各文字列数＋１の合計が
        １６ｋバイトまで．
　すべての条件を満たしていなければなりません．


§１２　履歴
　　1993/02/06      Version 1.00

    1993/02/10      ・クロスリファレンスファイル
    　　　　　　　　・テンポラリファイルを他の出力ファイルと同様に
    　　　　　　　　　ソースと同一ディレクトリに作成するように変更．

    1993/02/14      Version 1.40

    1993/03/14      ・バイナリファイル

    1993/09/23      ・DEFSで512を越える値を設定すると暴走するバグを
　　　　　　　　　　　修正．
　　　　　　　　　　・文字列定数
                    ・テーブルファイルのコメント
                    ・テーブルファイルの指定文字列の標準出力への出
                    　力（@P）

    1993/09/28      Version 1.50

    1993/10/03      ・パス名分解でディレクトリを表す「.」を，ファイ
                      ル名と拡張子を分ける「.」と混同するバグを修正．
                    ・テストデータ式の評価で8000hを越える数値を負の
                    　数として扱うバグを修正．

    1993/10/03      Version 1.55

    1993/10/03      ・ファイルインクルード

    1993/10/11      ・文字定数

    1993/10/24      Version 1.70

    1994/07/13      ・クロスリファレンス，パス２でのワーニング表示で
                      行数がインクルードファイルを含めてカウントして
                      いたバグを修正．

    1994/07/15      Version 1.71
    
    1994/08/27      Version 1.72 
                    ・キーワードの置換表の最大登録数が５１２になって
                    　いないバグを修正
    
    1994/09/18      Version 1.73
                    ・文字定数でスペースが正しく解釈できないバグを修正

    1995/05/08      Version 1.74
                    ・テンポラリファイルの表示行数が 9999 を越えたとこ
                      ろで 2パス目を中止してしまうバグを修正

    1996/08/15      Version 1.75
                    ・CSEG が 0xFFE0 を超えるアドレスを含む場合にバイナ
                      リ出力を指定すると、ディスク残容量の限りファイル
                      出力をする問題を修正

§１３　補足

　・著作権は，岡田仁史が保有します．
　・ＬＳＩ　Ｃ−８６試食版でコンパイルしています．

          PC-VAN (SIG ELEX)     SUM99842
　　　　　NIFTY-Serve         　GEB01046 　　岡田仁史
